#version 330

uniform sampler2D tex0;
uniform vec2 size;
uniform float health;

varying vec2 uv;
varying vec4 color;

layout(location = 0) out vec4 output;

uniform vec4 params;


float pattern(vec2 point, float radius, float cellSize)
{
    float c = 4.0 * radius * cellSize;
    float h = c / 2.0;  
    point = mod(point + h, c) - h;
    return length(point) - radius;
}



void main()
{
	vec4 texel = texture2D(tex0, uv);

	
	
    vec2 _uv = mat2(0.707, -0.707, 0.707, 0.707) * vec2(uv.x * 8.0, uv.y);
    float radius = 0.05;
    float dist = pattern(_uv, radius, 1.5);
 
    float sharpness = 80.0;
	float circ = radius * sharpness - dist * sharpness;
    
    float alpha = clamp(circ, 0.0, 1.0);
   
    vec3 dc = vec3(1,0.9,0.6); //
	vec3 bc = vec3(0.5, 0.8, 0.75); ///vec3(0.9, 0.2, 0.17)

	if (uv.x > health)
	{
		output = vec4(dc, texel.a * 0.2);
	}
	else
	{
		output = vec4(
			
			mix(bc,
				dc,
				alpha),
			
			texel.a);
	}	
}









