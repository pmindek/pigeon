#version 330

uniform sampler2D tex0;
uniform vec2 size;
uniform float health;
uniform int pass;

varying vec2 uv;
varying vec4 color;

layout(location = 0) out vec4 output;

uniform vec4 params;


float pattern(vec2 point, float radius, float cellSize)
{
    float c = 4.0 * radius * cellSize;
    float h = c / 2.0;  
    point = mod(point + h, c) - h;
    return length(point) - radius;
}



void main()
{
	vec4 texel = texture2D(tex0, uv);

	
	
    vec2 _uv = mat2(0.707, -0.707, 0.707, 0.707) * vec2(uv.x * 8.0, uv.y);
    float radius = 0.05;
    float dist = pattern(_uv, radius, 1.5);
 
    float sharpness = 80.0;
	float circ = radius * sharpness - dist * sharpness;
    
    float alpha = clamp(circ, 0.0, 1.0);
   
    vec3 dc = vec3(1,0.9,0.6); //
	vec3 bc = vec3(0.5, 0.8, 0.75); ///vec3(0.9, 0.2, 0.17)
	
	vec3 dcd = vec3(0.8, 0.2, 0.18);
	vec3 bcd = vec3(0.5, 0.6, 0.65);
	
	float danger = 0.0;
	if (health > 0.5)
	{
		danger = 0.0;
	}
	else if (health > 0.25)
	{
		danger = 1.0 - (health - 0.25) / 0.25;
	}
	else
	{
		danger = 1.0;
	}

	if (uv.x > health)
	{
		output = vec4(mix(dc, dcd, danger), texel.a * 0.4);
	}
	else
	{
		output = vec4(
			
			mix(mix(bc, bcd, danger),
				mix(dc, dcd, danger),
				alpha),
			
			texel.a);
	}	
	
	if (pass == 1)
	{
		output = texel;
	}
}









