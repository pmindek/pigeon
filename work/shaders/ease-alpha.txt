uniform sampler2D tex0;
uniform sampler2D noiseTex;

varying vec4 pos3D;
varying vec3 light, normal, eye, v;

varying vec2 uv;
uniform vec2 size;

varying vec4 color;

uniform float ms;
uniform float random;

uniform int time;

uniform float amount;

#define USE_PROCEDURAL

#ifdef USE_PROCEDURAL
float hash(vec3 p)  // replace this by something better
{
    p  = fract( p*0.3183099+.1 );
	p *= 17.0;
    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );
}

float noise( in vec3 x )
{
    vec3 i = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
	
    return mix(mix(mix( hash(i+vec3(0,0,0)), 
                        hash(i+vec3(1,0,0)),f.x),
                   mix( hash(i+vec3(0,1,0)), 
                        hash(i+vec3(1,1,0)),f.x),f.y),
               mix(mix( hash(i+vec3(0,0,1)), 
                        hash(i+vec3(1,0,1)),f.x),
                   mix( hash(i+vec3(0,1,1)), 
                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);
}
#else
float noise( in vec3 x )
{
    #if 1
    
    vec3 i = floor(x);
    vec3 f = fract(x);
	f = f*f*(3.0-2.0*f);
	vec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;
	vec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;
	return mix( rg.x, rg.y, f.z );
    
    #else
    
    ivec3 i = ivec3(floor(x));
    vec3 f = fract(x);
	f = f*f*(3.0-2.0*f);
	ivec2 uv = i.xy + ivec2(37,17)*i.z;
	vec2 rgA = texelFetch( iChannel0, (uv+ivec2(0,0))&255, 0 ).yx;
    vec2 rgB = texelFetch( iChannel0, (uv+ivec2(1,0))&255, 0 ).yx;
    vec2 rgC = texelFetch( iChannel0, (uv+ivec2(0,1))&255, 0 ).yx;
    vec2 rgD = texelFetch( iChannel0, (uv+ivec2(1,1))&255, 0 ).yx;
    vec2 rg = mix( mix( rgA, rgB, f.x ),
                   mix( rgC, rgD, f.x ), f.y );
    return mix( rg.x, rg.y, f.z );
    
    #endif
}
#endif




float easing(in float zo, in int e)
{
  float zoe = zo;
  if (e == 1)
  {
    zoe = (1.0 - cos(zo * 3.141592654)) * 0.5;
  }
  else if (e == 2)
  {
    zoe = zo * zo;
  }
  else if (e == 3)
  {
   zoe = pow(zo, 0.5);
  } 
  return zoe;
}

vec3 mixe(in vec3 c0, in vec3 c1, in float zo, in int e)
{
  float zoe = easing(zo, e);

  return mix(c0, c1, zoe);
}

const mat3 m = mat3( 0.00,  0.80,  0.60,
                    -0.80,  0.36, -0.48,
                    -0.60, -0.48,  0.64 );
					
void main()
{	  
  vec2 texCoord = gl_FragCoord.xy / (size / (amount * 1.5));
  vec2 uv = gl_FragCoord.xy / (size);
  
 float t = mod((float(time)) / 10000.0, 1.0);
 
 //float am = (1.0 + sin(t * 2.0 * 3.141592654)) * 0.5;
 float am = amount;
 
  vec3 _noise = fract(texture2D(noiseTex, vec2(texCoord.y, t)).rgb); 
  
  vec2 uvR = uv;
  vec2 uvG = uv;
  vec2 uvB = uv;
  
  uvR.x += (-1.0 + 2.0 * _noise.r) * 0.02 * am;
  uvG.x += (-1.0 + 2.0 * _noise.g) * 0.02 * am;
  uvB.x += (-1.0 + 2.0 * _noise.b) * 0.02 * am;
    
  vec4 _texelR = texture2D(tex0, uvR); 
  vec4 _texelG = texture2D(tex0, uvG); 
  vec4 _texelB = texture2D(tex0, uvB); 
  
  vec3 c0 = vec3(_texelR.r, _texelG.g, _texelB.b);
  vec3 c1 = vec3(_texelR.r * 0.3 + _texelG.g * 0.5 + _texelB.b * 0.2) * 3.0;
  
  
   
  gl_FragData[0] = vec4(mix(c0,c1, pow(amount, 4.0)), _texelR.a);
 
}
